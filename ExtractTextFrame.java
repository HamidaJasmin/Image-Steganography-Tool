/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package w1679752.fyp.imagesteganography;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author hamida
 */
public class ExtractTextFrame extends javax.swing.JFrame {

    /**
     * Creates new form ExtractImageFrame
     */
    public ExtractTextFrame() {
        initComponents();
        setLocationRelativeTo(null); //centers the frame
        getContentPane().setBackground(new java.awt.Color(13, 44, 65));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        UploadImageTextField = new javax.swing.JTextField();
        UploadImgBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        HiddenTextArea = new javax.swing.JTextArea();
        HiddenTextLabel = new javax.swing.JLabel();
        ExtractTextBtn = new javax.swing.JButton();
        UploadImgLabel = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();
        passwordLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Steganography Tool: Extract Hidden Text");

        UploadImageTextField.setToolTipText("");

        UploadImgBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        UploadImgBtn.setForeground(new java.awt.Color(13, 44, 65));
        UploadImgBtn.setText("Upload");
        UploadImgBtn.setToolTipText("");
        UploadImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadImgBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setOpaque(false);

        HiddenTextArea.setEditable(false);
        HiddenTextArea.setColumns(20);
        HiddenTextArea.setLineWrap(true);
        HiddenTextArea.setRows(5);
        jScrollPane1.setViewportView(HiddenTextArea);

        HiddenTextLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        HiddenTextLabel.setForeground(new java.awt.Color(255, 255, 255));
        HiddenTextLabel.setText("Hidden Text:");

        ExtractTextBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        ExtractTextBtn.setForeground(new java.awt.Color(13, 44, 65));
        ExtractTextBtn.setText("Extract Text");
        ExtractTextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtractTextBtnActionPerformed(evt);
            }
        });

        UploadImgLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        UploadImgLabel.setForeground(new java.awt.Color(255, 255, 255));
        UploadImgLabel.setText("Upload Stego Image:");

        passwordLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(255, 255, 255));
        passwordLabel.setText("Password");

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Extract Secret Text From Image");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(173, 173, 173)
                                .addComponent(ExtractTextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(HiddenTextLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UploadImgLabel)
                                    .addComponent(passwordLabel))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(UploadImageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                    .addComponent(PasswordField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(UploadImgBtn)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(titleLabel))
                        .addGap(0, 106, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(titleLabel)
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UploadImgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UploadImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UploadImgBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel))
                .addGap(82, 82, 82)
                .addComponent(ExtractTextBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(HiddenTextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Method That Does The Processes When User Presses Upload Button
    //To Upload Steganography Image
    private void UploadImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadImgBtnActionPerformed
        // TODO add your handling code here:
        // Create a file chooser
        JFileChooser originalImage = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image files", "jpg", "png", "jpeg");
        originalImage.setFileFilter(filter);

        // Show the file chooser dialog and get the result
        int returnVal = originalImage.showOpenDialog(null);

        // If the user selected a file, set the output file text field to the file path
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            UploadImageTextField.setText(originalImage.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_UploadImgBtnActionPerformed

    //Method That Displays The Hidden Text IF Password Is Valid
    private void ExtractTextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractTextBtnActionPerformed
        try {
            // TODO add your handling code here:
            //Retrieve the carrierImage File Path
            String stegoImage = UploadImageTextField.getText();

            //Retrieve User Input Password
            String password = PasswordField.getText();

            //Initalise imagePassword and hiddenText to the string variable 
            String imagePassword;
            String hiddenText;

            //Load The Image From The File Path
            BufferedImage stegImage = ImageIO.read(new File(stegoImage));

            //String Array That Holds The Data Of The Hidden Text & 
            //Password Returned From The ExtractText Method
            String[] hiddenMsg = ExtractText(stegImage);

            //The Hidden Text & Password Retrieved From The Array
            hiddenText = hiddenMsg[0];
            imagePassword = hiddenMsg[1];

            //Initalizes hashedPassword String Variable
            String hashedPassword = null;
            try {
                //Hashes Password Using Cryptography Class
                hashedPassword = Cryptography.hashPassword(password);
            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(ExtractTextFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

            String DecryptedText = Cryptography.Decrypt(hiddenText);

            //Error Handling, Ensuring An Carrier Image Is Uploaded
            if (stegoImage.isEmpty()) {
                showMessageDialog(null, "Upload Cover Image!");
            } else {
                //Error Handling, Ensuring Password Field Isnt Empty
                if (password.isEmpty()) {
                    showMessageDialog(null, "Error: Enter Password!");
                    //If Hashed Password The User Input Matches The Hashed Password Saved In Image, 
                    //HiddenText Will Be Revealed
                } else {
                    if (hashedPassword.equals(imagePassword)) {
                        HiddenTextArea.setText(DecryptedText);

                    } else {
                        //Error Handling, Error Message If Password Doesnt Match Password Embedded In Image
                        showMessageDialog(null, "Error: Incorrect Password!");

                    }

                }

            }
        } catch (IOException ex) {
            showMessageDialog(null, "Error: Check File Path");
            Logger.getLogger(ExtractTextFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_ExtractTextBtnActionPerformed

    //Method That  Extracts The Password & Hidden Text From The Carrier Image.
    private String[] ExtractText(BufferedImage carrierImage) {

        //Height & Width Of The Image
        int width = carrierImage.getWidth();
        int height = carrierImage.getHeight();

        //Gets The Length Of The Hidden Text From Th First Two Pixels
        int hiddenTextLength = ((carrierImage.getRGB(0, 0) & 0xFF) << 8) | (carrierImage.getRGB(1, 0) & 0xFF);

        //Gets The Length Of The Password From The 3rd and 4th Pixels
        int passwordLength = ((carrierImage.getRGB(2, 0) & 0xFF) << 8) | (carrierImage.getRGB(3, 0) & 0xFF);

        //Creating Two Byte Arrays To Store The Hidden Text & Password Byte Bits
        byte[] hiddenTextBytes = new byte[hiddenTextLength];
        byte[] passwordBytes = new byte[passwordLength];

        //Extracts The Hidden Text From The RGB Components
        //pixelCount Starts At 4 Because First 4 Pixels Already Used For Length
        int pixelCount = 4;

        //For Loop That Iterates Through The Length of the hiddenTextBytes Array
        for (int i = 0; i < hiddenTextBytes.length; i++) {

            //Creates Byte vAriable
            byte b = 0;

            //For Loop That Iterates Over The Bits
            //& Represents The 8 Bits In A Byte
            for (int j = 0; j < 8; j++) {

                //Checks To Ensure Its Only iterated Through The Images Dimensions
                if (pixelCount < width * height) {

                    //x Coordinate Of The 2D Image, Shows Current Horizontal Position Of Pixel In Current rOW, L-R
                    int x = pixelCount % width;
                    //y Coordinate Of The 2D Image, Shows Current Vertical Position Of Pixel, T-B
                    int y = pixelCount / width;

                    //Gets The RGB Value Of The Pixel Loacted In The X, Y Coordinates Of The 2D Image
                    int RGB = carrierImage.getRGB(x, y);

                    //Gets The Individual Colour Components From RGB OF Pixel
                    int Red = (RGB >>> 16) & 0xFF;
                    int Green = (RGB >>> 8) & 0xFF;
                    int Blue = RGB & 0xFF;

                    //Extracts the LSB Of The RGB Bits
                    //& Sets The Current Pixel j Bit To The Byte Variable
                    b |= ((Red & 0x1) << (7 - j));
                    b |= ((Green & 0x1) << (7 - j));
                    b |= ((Blue & 0x1) << (7 - j));

                }
                //Counts Number Of Pixels That Runs Through The Loop
                pixelCount++;
            }
            //Sets Current Byte Of The Hidden Test To The Byte Varible 
            hiddenTextBytes[i] = b;
        }

        //Extracts The Password From The Alpha Component
        int secondPixelCount = 4 + hiddenTextLength * 8;

        //For Loop That Iterates Through The Length of the hiddenTextBytes Array
        for (int i = 0; i < passwordBytes.length; i++) {

            //Creates Byte vAriable
            byte b = 0;

            //For Loop That Iterates Over The Bits
            //& Represents The 8 Bits In A Byte
            for (int j = 0; j < 8; j++) {

                //Checks To Ensure Its Only iterated Through The Images Dimensions
                if (secondPixelCount < width * height) {

                    //x Coordinate Of The 2D Image, Shows Current Horizontal Position Of Pixel In Current rOW, L-R
                    int x = secondPixelCount % width;
                    //y Coordinate Of The 2D Image, Shows Current Vertical Position Of Pixel, T-B
                    int y = secondPixelCount / width;

                    //Gets The RGB Value Of The Pixel Loacted In The X, Y Coordinates Of The 2D Image
                    int RGB = carrierImage.getRGB(x, y);

                    //Gets The Individual Colour Components From RGB Alpha OF Pixel
                    int Alpha = (RGB >>> 24) & 0xFF;
                    //Extracts the LSB Of The RGB Bits
                    //& Sets The Current Pixel j Bit To The Byte Variable
                    b |= ((Alpha & 0x1) << (7 - j));
                }
                 //Counts Number Of Pixels That Runs Through The Loop
                secondPixelCount++;
            }
            //Sets Current Byte Of The Hidden Text To The Byte Varible 
            passwordBytes[i] = b;
        }

        //Converting The Byte Arrays, Binary Values Into Into String Using UTF_8
        String hiddenText = new String(hiddenTextBytes, StandardCharsets.UTF_8);
        String password = new String(passwordBytes, StandardCharsets.UTF_8);

        //String Array Declaration So Both Values Can Be Returned 
        String[] extractedTexts = new String[2];
        extractedTexts[0] = hiddenText;
        extractedTexts[1] = password;

        return extractedTexts;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExtractTextFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExtractTextFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExtractTextFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExtractTextFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExtractTextFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExtractTextBtn;
    private javax.swing.JTextArea HiddenTextArea;
    private javax.swing.JLabel HiddenTextLabel;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JTextField UploadImageTextField;
    private javax.swing.JButton UploadImgBtn;
    private javax.swing.JLabel UploadImgLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
