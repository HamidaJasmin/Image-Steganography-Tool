/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package w1679752.fyp.imagesteganography;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author hamida
 */
public class EmbedImageFrame extends javax.swing.JFrame {

    /**
     * Creates new form EmbedImageFrame
     */
    public EmbedImageFrame() {

        initComponents();
        //Centers The Frame
        setLocationRelativeTo(null);
        //Adds A Background Colour
        getContentPane().setBackground(new java.awt.Color(13, 44, 65));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SaveImageBtn = new javax.swing.JButton();
        EmbedImageBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        HiddenTextArea = new javax.swing.JTextArea();
        UploadImageLabel = new javax.swing.JLabel();
        UploadImageTextField = new javax.swing.JTextField();
        UploadImgBtn = new javax.swing.JButton();
        HiddenTextLabel = new javax.swing.JLabel();
        SaveStegImageLabel = new javax.swing.JLabel();
        SaveStegImageTextField = new javax.swing.JTextField();
        displayImage = new javax.swing.JLabel();
        StegoImage = new javax.swing.JLabel();
        ogImageLabel = new javax.swing.JLabel();
        sImageLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        PasswordField = new javax.swing.JPasswordField();
        ConfirmPasswordField = new javax.swing.JPasswordField();
        titleLabel = new javax.swing.JLabel();
        clearForm = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Steganography Tool: Embed Image");

        SaveImageBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        SaveImageBtn.setForeground(new java.awt.Color(13, 44, 65));
        SaveImageBtn.setText("Save");
        SaveImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveImageBtnActionPerformed(evt);
            }
        });

        EmbedImageBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        EmbedImageBtn.setForeground(new java.awt.Color(13, 44, 65));
        EmbedImageBtn.setText("Embed Image");
        EmbedImageBtn.setToolTipText("Press to Embed");
        EmbedImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmbedImageBtnActionPerformed(evt);
            }
        });

        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setOpaque(false);

        HiddenTextArea.setColumns(20);
        HiddenTextArea.setLineWrap(true);
        HiddenTextArea.setRows(5);
        jScrollPane1.setViewportView(HiddenTextArea);

        UploadImageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        UploadImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        UploadImageLabel.setText("Upload Image: ");

        UploadImgBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        UploadImgBtn.setForeground(new java.awt.Color(13, 44, 65));
        UploadImgBtn.setText("Upload");
        UploadImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadImgBtnActionPerformed(evt);
            }
        });

        HiddenTextLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        HiddenTextLabel.setForeground(new java.awt.Color(255, 255, 255));
        HiddenTextLabel.setText("Hidden Text To Be Embedded:");

        SaveStegImageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        SaveStegImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        SaveStegImageLabel.setText("Save Stego Image:");

        displayImage.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        displayImage.setForeground(new java.awt.Color(255, 255, 255));

        ogImageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        ogImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        ogImageLabel.setText("Original Image:");

        sImageLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        sImageLabel.setForeground(new java.awt.Color(255, 255, 255));
        sImageLabel.setText("Stego Image:");

        passwordLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        passwordLabel.setForeground(new java.awt.Color(255, 255, 255));
        passwordLabel.setText("Password: ");

        confirmPasswordLabel.setFont(new java.awt.Font("Lucida Grande", 1, 16)); // NOI18N
        confirmPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        confirmPasswordLabel.setText("Confirm Password: ");

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Embed Secret Text Into Image");

        clearForm.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        clearForm.setText("Reset Form");
        clearForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(396, 396, 396)
                .addComponent(EmbedImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ogImageLabel)
                            .addComponent(displayImage, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(106, 106, 106)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sImageLabel)
                            .addComponent(StegoImage, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(128, 128, 128))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HiddenTextLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(UploadImageLabel)
                                .addGap(34, 34, 34)
                                .addComponent(UploadImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(UploadImgBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(confirmPasswordLabel)
                                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SaveStegImageLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(SaveStegImageTextField)
                                        .addGap(18, 18, 18)
                                        .addComponent(SaveImageBtn))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(166, 166, 166))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(titleLabel)
                        .addGap(226, 226, 226))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(clearForm)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(clearForm)
                .addGap(18, 18, 18)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UploadImageLabel)
                    .addComponent(UploadImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UploadImgBtn))
                .addGap(18, 18, 18)
                .addComponent(HiddenTextLabel)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLabel)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(ConfirmPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SaveStegImageLabel)
                    .addComponent(SaveStegImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveImageBtn))
                .addGap(18, 18, 18)
                .addComponent(EmbedImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ogImageLabel)
                    .addComponent(sImageLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StegoImage, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayImage, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Method That Does The Processes When User Presses Save Button
    private void SaveImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveImageBtnActionPerformed
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        //Opens The File Dialog For The User To Set The File Path
        int returnVal = fileChooser.showSaveDialog(null);
        File chosenFile = fileChooser.getSelectedFile();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Sets The Text Field Object With The File Path Selected By The User
            SaveStegImageTextField.setText(chosenFile.getAbsolutePath());
        }
    }//GEN-LAST:event_SaveImageBtnActionPerformed

    //Method That Does The Processes When User Presses Embed Image Button
    private void EmbedImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmbedImageBtnActionPerformed

        try {
            // TODO add your handling code here:

            //Get File Paths of the CoverImage and Where the New Image Will Be Saved
            String coverImage = UploadImageTextField.getText();
            String stegoImage = SaveStegImageTextField.getText();

            //Get Password and Confirm Password Input
            String password = PasswordField.getText();;
            String confirmPassword = ConfirmPasswordField.getText();

            //Get The Secret Text That Will Be Embedded Into The Image
            String textToEmbed = HiddenTextArea.getText();

            //Error Handling, Ensuring An Cover Image Is Uploaded
            if (coverImage.isEmpty()) {
                showMessageDialog(null, "Error: Upload Cover Image!");
            } else {
                //Error Handling: Ensuring There Is Text To Be Embedded
                if (textToEmbed.isEmpty()) {
                    showMessageDialog(null, "Error: Write Secret Text To Be Embedded!");
                } else {
                    //Error Handling: Ensuring The File Path Is Set To Save The Embedded Stego Image
                    if (stegoImage.isEmpty()) {
                        showMessageDialog(null, "Error: Choose Where To Save The Steganography Image!");
                    } else {
                        //Ensuring A Strong Password Is Used
                        if (!PasswordValidation(password)) {
                            showMessageDialog(null, "Password needs at least ONE each of the following:\n"
                                    + "- capital letter \n"
                                    + "- lowercase letter \n"
                                    + "- number \n"
                                    + "- special character \n"
                                    + "and a length between 8-16 letters");
                        } else {
                            //Ensuring Both The Passwords Match For Validation
                            if (password.equals(confirmPassword)) {

                                //Load The Image From The File Path
                                BufferedImage carrierImage = ImageIO.read(new File(coverImage));

                                //Calls the EmbedImage Method and Returns The Embedded Image To Store in steganographyImage Variable
                                BufferedImage steganographyImage = EmbedImage(carrierImage, textToEmbed, password);

                                //Creates A File Object And Gets The File Path Of Where The Steganography Image Will Be Saved
                                File outputFile = new File(stegoImage);

                                //Uses ImageIO.write Method To Save The Image
                                //PNG Is The Selected Image Format Because It Provides A Loseless Image Format & Others May Reduce Image Quality
                                ImageIO.write(steganographyImage, "png", outputFile);

                                //An Image Icon Is Created With The Steganography Image
                                ImageIcon labelIcon = new ImageIcon(steganographyImage);

                                //Scales The Image To The Same Size As The JLabel It Will Be Displayed In 
                                Image scaleImage = labelIcon.getImage().getScaledInstance(StegoImage.getWidth(),
                                        StegoImage.getHeight(), Image.SCALE_SMOOTH);

                                //The Scaled Icon
                                ImageIcon carrierImageIcon = new ImageIcon(scaleImage);

                                //Displays The Image In The JLabel
                                StegoImage.setIcon(carrierImageIcon);

                                //Message PopUp Dialog To Notify The User The Steganography Process Is Complete And Successful
                                JOptionPane.showMessageDialog(null, "Steganography Complete! Image Has Been Embedded!");
                            } else {
                                //Error Handling: If That Passwords Don't Match
                                showMessageDialog(null, "Error: Passwords Dont Match!");
                            }
                        }
                    }
                }
            }

        } catch (IOException ex) {
            showMessageDialog(null, "Error! Can't read file path");
            Logger.getLogger(EmbedImageFrame.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_EmbedImageBtnActionPerformed

    //Method That Does The Processes When User Presses Upload Button
    private void UploadImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadImgBtnActionPerformed

        // TODO add your handling code here:
        //To Prompt The User To Upload An Image File
        JFileChooser fileChooser = new JFileChooser();
        //Extension Filter To Ensure Only Image Types Can Be Selected By The User
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files Only: ", "jpg", "png", "jpeg");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(null);
        File selectedImage = fileChooser.getSelectedFile();
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //Sets The Text Field Object With The File Path Selected By The User
            UploadImageTextField.setText(selectedImage.getAbsolutePath());
        }

        //To Display The Cover Image The User Selected
        try {
            //Load The Image From The File Path
            BufferedImage image = ImageIO.read(selectedImage);

            //An Image Icon Is Created With The Cover Image
            ImageIcon labelIcon = new ImageIcon(image);

            //Scales The Image To The Same Size As The JLabel It Will Be Displayed In 
            Image scaleImage = labelIcon.getImage().getScaledInstance(displayImage.getWidth(),
                    displayImage.getHeight(), Image.SCALE_SMOOTH);

            //The Scaled Icon
            ImageIcon CoverImageIcon = new ImageIcon(scaleImage);

            //Displays The Image In The JLabel
            displayImage.setIcon(CoverImageIcon);
        } catch (IOException ex) {
            Logger.getLogger(EmbedImageFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_UploadImgBtnActionPerformed

    //Method That Clears All The Fields
    private void clearFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormActionPerformed
        // TODO add your handling code here:
        UploadImageTextField.setText("");
        PasswordField.setText("");
        ConfirmPasswordField.setText("");
        HiddenTextArea.setText("");
        SaveStegImageTextField.setText("");
        displayImage.setIcon(null);
        StegoImage.setIcon(null);

    }//GEN-LAST:event_clearFormActionPerformed

    //Method That Embeds The Text Into The Cover Image & Returns The Steganography Image
    private BufferedImage EmbedImage(BufferedImage carrierImage, String textToEmbed, String password) {

        //Height & Width Of The Image
        int width = carrierImage.getWidth();
        int height = carrierImage.getHeight();

        //Generates A New Image With The Same Measurements As The Original
        BufferedImage steganographyImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

        //Copy The Pixels From The Original Image Into The New Steg Image
        steganographyImage.getGraphics().drawImage(carrierImage, 0, 0, null);

        //Initalizes hashedPassword String Variable
        String hashedPassword = null;
        try {
            //Hashes Password Using Cryptography Class, hashPassword Method
            hashedPassword = Cryptography.hashPassword(password);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(EmbedImageFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String encryptedText = Cryptography.Encrypt(textToEmbed);

        //Converting The Strings Into UTF_8 Encoded Byte Arrays Using The .getBytes Method
        byte[] hiddenTextBytes = encryptedText.getBytes(StandardCharsets.UTF_8);
        byte[] passwordBytes = hashedPassword.getBytes(StandardCharsets.UTF_8);

        //Gets The Length Of The Hidden Text Bytes 
        //To Identify Number Of Bytes Required 
        int hiddenTextBytesLength = hiddenTextBytes.length;

        //Sets The Length Into The First Two Pixels Of The Image
        int pixelNo1 = (hiddenTextBytesLength >>> 8) & 0xFF; //MSB
        int pixelNo2 = hiddenTextBytesLength & 0xFF; //LSB

        //setRGB Method Replaces The Pixels With The Altered Pixels
        steganographyImage.setRGB(0, 0, pixelNo1);
        steganographyImage.setRGB(1, 0, pixelNo2);

        //Gets The Length Of The Password Bytes
        int passwordBytesLength = passwordBytes.length;

        //Sets The Length Of The Password Bytes Into The 3rd and 4th Pixels
        int pixelNo3 = (passwordBytesLength >>> 8) & 0xFF;
        int pixelNo4 = passwordBytesLength & 0xFF;

        steganographyImage.setRGB(2, 0, pixelNo3);
        steganographyImage.setRGB(3, 0, pixelNo4);

        //Embeds The Hidden Text Into The RGB Components
        //pixelCount Starts At 4 Because First 4 Pixels Already Used For Length
        int pixelCount = 4;

        //For Each Loop That Will Iterate Over Each hiddenTextByte
        for (byte b : hiddenTextBytes) {

            //For Loop That Iterates From 0 To 7, One By One As Long As i Is Less Than 8
            //& Represents The 8 Bits In A Byte
            for (int i = 0; i < 8; i++) {

                //Gets the Byte Bit & Extracts It To Store In The binaryValue Int Variable
                //Extraacts LSB By Starting With MSB (7) Of Each Byte
                //& Perfoms AND operation of 00000001
                int binaryValue = (b >> (7 - i)) & 0x1;

                //Checks To Ensure Its Only iterated Through The Images Dimensions
                if (pixelCount < width * height) {

                    //Width Because Its Iterated In Rows Through LSB
                    //x Coordinate Of The 2D Image, Shows Current Horizontal Position Of Pixel In Current rOW, L-R
                    int x = pixelCount % width;
                    //y Coordinate Of The 2D Image, Shows Current Vertical Position Of Pixel, T-B
                    int y = pixelCount / width;

                    //Gets The RGB Value Of The Pixel Loacted In The X, Y Coordinates Of The 2D Image
                    int RGB = steganographyImage.getRGB(x, y);

                    //Gets The Individual Colour Components From RGB OF Pixel
                    int Alpha = (RGB >> 24) & 0xFF;
                    int Red = (RGB >> 16) & 0xFF;
                    int Green = (RGB >> 8) & 0xFF;
                    int Blue = RGB & 0xFF;

                    //Embed The Bit Into The LSB Of RGB
                    //Using Bitwise OR | and Bitwise AND &
                    //Sets LSB To 1
                    if (binaryValue == 1) {
                        Red |= 0x1;
                        Green |= 0x1;
                        Blue |= 0x1;

                        //Sets LSB To 0
                    } else {
                        Red &= 0xFE;
                        Green &= 0xFE;
                        Blue &= 0xFE;
                    }

                    //Set The New Pixel Values In The Image
                    int z = (Alpha << 24) | (Red << 16) | (Green << 8) | Blue;
                    steganographyImage.setRGB(x, y, z);

                }
                //Counts Number Of Pixels That Runs Through The Loop
                //That Runs Through The Loop After Embedding The Bits
                pixelCount++;
            }
        }

        //Embeds The Password Bits Into The Alpha Component
        //Start After textBytes Bits
        int secondPixelCount = 4 + hiddenTextBytesLength * 8;

        //For Each Loop That Will Iterate Over Each passwordByte
        for (byte b : passwordBytes) {

            //For Loop That Iterates From 0 To 7, One By One As Long As i Is Less Than 8
            //& Represents The 8 Bits In A Byte
            for (int i = 0; i < 8; i++) {

                //Gets the Byte Bit & Extracts It To Store In The binaryValue Int Variable
                //Extracts LSB By Starting With MSB (7) Of Each Byte
                //& Perfoms AND operation of 00000001
                int binaryValue = (b >> (7 - i)) & 0x1;

                //Checks To Ensure Its Only iterated Through The Images Dimensions
                if (secondPixelCount < width * height) {

                    //Width Because Its Iterated In Rows Through LSB
                    //x Coordinate Of The 2D Image, Shows Current Horizontal Position Of Pixel In Current rOW, L-R
                    int x = secondPixelCount % width;
                    //y Coordinate Of The 2D Image, Shows Current Vertical Position Of Pixel, T-B
                    int y = secondPixelCount / width;

                    //Gets The RGB Value Of The Pixel Loacted In The X, Y Coordinates Of tHE 2D Image
                    int RGB = steganographyImage.getRGB(x, y);

                    //Gets The Individual Colour Components From RGB OF Pixel
                    int Alpha = (RGB >> 24) & 0xFF;
                    int Red = (RGB >> 16) & 0xFF;
                    int Green = (RGB >> 8) & 0xFF;
                    int Blue = RGB & 0xFF;

                    //Embed The Bit Into The LSB Of RGB
                    //Using Bitwise OR | and Bitwise AND &
                    //Sets LSB To 1
                    if (binaryValue == 1) {
                        Alpha |= 0x1;
                        //Sets LSB To 0
                    } else {
                        Alpha &= 0xFE;
                    }

                    int z = (Alpha << 24) | (Red << 16) | (Green << 8) | Blue;
                    steganographyImage.setRGB(x, y, z);

                }
                //Counts Number Of Pixels That Runs Through The Loop
                //That Runs Through The Loop After Embedding The Bits
                secondPixelCount++;
            }
        }

        //Return The New Image With The Embedded Text
        return steganographyImage;
    }

    //Method To Ensure Password Is Secure & Strong
    private boolean PasswordValidation(String password) {
        String password1 = PasswordField.getText();

        String regex = "^(?=.*[0-9])"//number
                + "(?=.*[a-z])"//lowercase
                + "(?=.*[A-Z])"//uppercase
                + "(?=.*[£@#$%^&+=])"//special characters
                + "(?=\\S+$)."//no whitespace and
                + "{8,16}$"; // 8-16 characters long

        //Method That Ensures The String Password
        //Matches The Pattern Of The Regex
        Pattern pattern = Pattern.compile(regex);

        Matcher match = pattern.matcher(password1);

        return match.matches();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmbedImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmbedImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmbedImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmbedImageFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmbedImageFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField ConfirmPasswordField;
    private javax.swing.JButton EmbedImageBtn;
    private javax.swing.JTextArea HiddenTextArea;
    private javax.swing.JLabel HiddenTextLabel;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JButton SaveImageBtn;
    private javax.swing.JLabel SaveStegImageLabel;
    private javax.swing.JTextField SaveStegImageTextField;
    private javax.swing.JLabel StegoImage;
    private javax.swing.JLabel UploadImageLabel;
    private javax.swing.JTextField UploadImageTextField;
    private javax.swing.JButton UploadImgBtn;
    private javax.swing.JButton clearForm;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JLabel displayImage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel ogImageLabel;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel sImageLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

}
